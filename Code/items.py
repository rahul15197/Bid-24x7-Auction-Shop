#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Nov 22, 2019 10:19:02 PM IST  platform: Windows NT

import sys
import sqlite3 as sq
import time
from datetime import datetime
from functools import partial
from tkinter import RIGHT, X, HORIZONTAL, messagebox
import add_new_item as ani
import master as m
from datetime import timedelta
import callbid as cb

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import items_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root, top
    root = tk.Tk()
    top = item_window(root)
    items_support.init(root, top)
    root.mainloop()


w = None


def create_item_window(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = item_window(w)
    items_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_item_window():
    global w
    w.destroy()
    w = None


class item_window:

    def showdesc(self, x1):
        curItem = self.Scrolledtreeview.focus()
        contents = (self.Scrolledtreeview.item(curItem))
        item_desc = contents['values'][3]
        messagebox.showinfo("Item Description", item_desc)

    def addnewitem(self):
        ani.create_newitem_window(root=root)

    def refresh(self):
        conn = sq.connect('accounts.db')
        all_rows = conn.execute("SELECT * from ITEMS")
        for i in self.Scrolledtreeview.get_children():
            self.Scrolledtreeview.delete(i)
        for row in all_rows:
            # calculation of remaining time
            current_time = str(datetime.now().time())
            current_time = current_time.split('.')[0]
            FMT = '%H:%M:%S'
            time_left = datetime.strptime(row[7], FMT) - datetime.strptime(current_time, FMT)
            remaining_time = str(time_left)
            sold = 'sold'
            if time_left < timedelta(hours=0, minutes=0, seconds=0):
                conn.execute("UPDATE ITEMS SET status=? WHERE id = ?", (sold, row[0]))
                remaining_time = 0
                conn.commit()
            self.Scrolledtreeview.insert('', 'end', values=(
                row[0], row[1], row[2], row[3], row[4], row[5], row[6], remaining_time, row[8], row[9]))

    def search(self):
        text = str(self.Entry1.get())
        if text != '':
            for i in self.Scrolledtreeview.get_children():
                self.Scrolledtreeview.delete(i)
            conn = sq.connect('accounts.db')
            all_rows = conn.execute("SELECT * FROM ITEMS WHERE name LIKE ?", ('%' + text + '%',))
            for row in all_rows:
                # calculation of remaining time
                current_time = str(datetime.now().time())
                current_time = current_time.split('.')[0]
                FMT = '%H:%M:%S'
                time_left = datetime.strptime(row[7], FMT) - datetime.strptime(current_time, FMT)
                remaining_time = str(time_left)
                sold = 'sold'
                if time_left < timedelta(hours=0, minutes=0, seconds=0):
                    conn.execute("UPDATE ITEMS SET status=? WHERE id = ?", (sold, row[0]))
                    remaining_time = '0'
                    conn.commit()
                self.Scrolledtreeview.insert('', 'end', values=(
                    row[0], row[1], row[2], row[3], row[4], row[5], row[6], remaining_time, row[8], row[9]))
        else:
            self.refresh()

    def logout(self):
        confirmation = messagebox.askquestion('Auction Shop', 'Are you sure you want to logout?', icon="warning")
        if confirmation == 'yes':
            conn = sq.connect('accounts.db')
            conn.execute("DELETE FROM CURRENT_USER")
            conn.commit()
            root.destroy()
            m.vp_start_gui()

    def callbid(self):
        conn = sq.connect('accounts.db')
        curItem = self.Scrolledtreeview.focus()
        contents = (self.Scrolledtreeview.item(curItem))
        owner = contents['values'][5]
        bidder = conn.execute("SELECT * FROM CURRENT_USER").fetchone()[0]
        if not self.Scrolledtreeview.selection():
            messagebox.showerror("Call Bid", "No Item Selected")
        else:
            if owner == bidder:
                conn = sq.connect('accounts.db')
                user_email = str(conn.execute("SELECT * FROM CURRENT_USER").fetchone()[1])
                query = conn.execute("SELECT * from COUNT WHERE email = ?",
                                     (user_email,))
                if query.fetchone() is None:
                    conn.execute("INSERT INTO COUNT (email, count) VALUES (?, ?)", (user_email, 1))
                    conn.commit()
                else:
                    count = int(conn.execute("SELECT * FROM COUNT WHERE email=(?)", (user_email,)).fetchone()[1]) + 1
                    conn.execute("UPDATE COUNT SET count=(?)",
                                 (count,))
                    conn.commit()
                if int(conn.execute("SELECT * FROM COUNT WHERE email=(?)", (user_email,)).fetchone()[1]) > 2:
                    messagebox.showwarning("Message", "You have been flagged as fraud user")
                else:
                    messagebox.showwarning("Message",
                                           "Do not call bid on your item, you will be flagged as fraud on 3rd attempt")
            else:
                curItem = self.Scrolledtreeview.focus()
                contents = (self.Scrolledtreeview.item(curItem))
                item_id = contents['values'][0]
                status = contents['values'][6]
                current_bid = contents['values'][8]
                conn = sq.connect('accounts.db')
                conn.execute("DELETE FROM FOCUS")
                if status == 'available':
                    conn.execute("INSERT INTO FOCUS (id,status,current_bid) \
                                            VALUES (?, ?, ?)",
                                 (item_id, status,
                                  current_bid))
                    conn.commit()
                    cb.create_call_bid(root=root)
                else:
                    messagebox.showerror("Message", "Item Already Sold")

    def deleteitem(self):
        curItem = self.Scrolledtreeview.focus()
        contents = (self.Scrolledtreeview.item(curItem))
        bidder = contents['values'][9]
        owner = contents['values'][5]
        conn = sq.connect('accounts.db')
        curr_user_email = str(conn.execute("SELECT * FROM CURRENT_USER").fetchone()[1])
        query = conn.execute("SELECT * FROM ACCOUNT_DETAILS WHERE email=(?)", (curr_user_email, )).fetchone()
        if not self.Scrolledtreeview.selection():
            messagebox.showerror("Delete Item", "No Item Selected")
        else:
            confirmation = messagebox.askquestion('Auction Shop', 'Are you sure you want to delete this item?',
                                                  icon="warning")
            if confirmation == 'yes':
                if owner == bidder or query[4] == 'admin':
                    curritem = self.Scrolledtreeview.focus()
                    itemcontents = (self.Scrolledtreeview.item(curritem))
                    selecteditem = itemcontents['values']
                    self.Scrolledtreeview.delete(curritem)
                    conn = sq.connect('accounts.db')
                    conn.execute("DELETE FROM ITEMS WHERE id = %d" % int(selecteditem[0]))
                    conn.commit()
                else:
                    messagebox.showwarning("Message", "Sorry you do not have the privileges to delete this item")

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1230x800+130+0")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(0, 0)
        top.title("Auction Shop")
        top.configure(background="#b9dff9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        # database
        conn = sq.connect('accounts.db')
        cursor = conn.cursor()
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS ITEMS (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, category TEXT, "
            "desc TEXT, quantity INTEGER, owner TEXT, status TEXT, duration TEXT, current_bid INTEGER, current_bidder TEXT)")
        conn.execute("CREATE TABLE IF NOT EXISTS FOCUS (id INTEGER , status TEXT, current_bid INTEGER)")
        conn.execute("DELETE FROM FOCUS")
        conn.commit()

        self.title_text = tk.Label(top)
        self.title_text.place(relx=0.472, rely=0.025, height=51, width=85)
        self.title_text.configure(activebackground="#f9f9f9")
        self.title_text.configure(activeforeground="black")
        self.title_text.configure(background="#b9dff9")
        self.title_text.configure(disabledforeground="#a3a3a3")
        self.title_text.configure(font="-family {Segoe UI} -size 20")
        self.title_text.configure(foreground="#ffffff")
        self.title_text.configure(highlightbackground="#d9d9d9")
        self.title_text.configure(highlightcolor="#646464646464")
        self.title_text.configure(text='''Items''')

        self.searchlabel = tk.Label(top)
        self.searchlabel.place(relx=0.309, rely=0.113, height=34, width=64)
        self.searchlabel.configure(activebackground="#f9f9f9")
        self.searchlabel.configure(activeforeground="black")
        self.searchlabel.configure(background="#b9dff9")
        self.searchlabel.configure(disabledforeground="#a3a3a3")
        self.searchlabel.configure(font="-family {Segoe UI} -size 12")
        self.searchlabel.configure(foreground="#ffffff")
        self.searchlabel.configure(highlightbackground="#d9d9d9")
        self.searchlabel.configure(highlightcolor="black")
        self.searchlabel.configure(text='''Search''')

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.39, rely=0.125, height=24, relwidth=0.239)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")

        self.search_button = tk.Button(top)
        self.search_button.place(relx=0.48, rely=0.163, height=38, width=66)
        self.search_button.configure(activebackground="#ececec")
        self.search_button.configure(activeforeground="#000000")
        self.search_button.configure(background="#382ff0")
        self.search_button.configure(disabledforeground="#a3a3a3")
        self.search_button.configure(font="-family {Segoe UI} -size 10")
        self.search_button.configure(foreground="#ffffff")
        self.search_button.configure(highlightbackground="#d9d9d9")
        self.search_button.configure(highlightcolor="#000000")
        self.search_button.configure(pady="0")
        self.search_button.configure(text='''Search''')
        self.search_button.configure(command=self.search)

        self.logout_button = tk.Button(top)
        self.logout_button.place(relx=0.024, rely=0.838, height=38, width=66)
        self.logout_button.configure(activebackground="#ececec")
        self.logout_button.configure(activeforeground="#000000")
        self.logout_button.configure(background="#382ff0")
        self.logout_button.configure(disabledforeground="#a3a3a3")
        self.logout_button.configure(font="-family {Segoe UI} -size 10")
        self.logout_button.configure(foreground="#ffffff")
        self.logout_button.configure(highlightbackground="#d9d9d9")
        self.logout_button.configure(highlightcolor="#000000")
        self.logout_button.configure(pady="0")
        self.logout_button.configure(text='''Logout''')
        self.logout_button.configure(command=self.logout)

        self.bid_button = tk.Button(top)
        self.bid_button.place(relx=0.48, rely=0.838, height=38, width=66)
        self.bid_button.configure(activebackground="#ececec")
        self.bid_button.configure(activeforeground="#000000")
        self.bid_button.configure(background="#382ff0")
        self.bid_button.configure(disabledforeground="#a3a3a3")
        self.bid_button.configure(font="-family {Segoe UI} -size 10")
        self.bid_button.configure(foreground="#ffffff")
        self.bid_button.configure(highlightbackground="#d9d9d9")
        self.bid_button.configure(highlightcolor="#000000")
        self.bid_button.configure(pady="0")
        self.bid_button.configure(text='''Call Bid''')
        self.bid_button.configure(command=self.callbid)

        self.delete_button = tk.Button(top)
        self.delete_button.place(relx=0.600, rely=0.838, height=38, width=106)
        self.delete_button.configure(activebackground="#ececec")
        self.delete_button.configure(activeforeground="#000000")
        self.delete_button.configure(background="#382ff0")
        self.delete_button.configure(disabledforeground="#a3a3a3")
        self.delete_button.configure(font="-family {Segoe UI} -size 10")
        self.delete_button.configure(foreground="#ffffff")
        self.delete_button.configure(highlightbackground="#d9d9d9")
        self.delete_button.configure(highlightcolor="#000000")
        self.delete_button.configure(pady="0")
        self.delete_button.configure(text='''Delete Item''')
        self.delete_button.configure(command=self.deleteitem)

        self.style.configure('Treeview', font="TkDefaultFont")
        self.Scrolledtreeview = ScrolledTreeView(top)
        self.Scrolledtreeview.place(relx=0.008, rely=0.225, relheight=0.596
                                    , relwidth=0.984)
        self.Scrolledtreeview.configure(
            columns=("Col0", "Col1", "Col2", "Col3", "Col4", "Col5", "Col6", "Col7", "Col8", "Col9"))
        # build_treeview_support starting.
        # hidden column
        self.Scrolledtreeview.heading("#0", text="")
        self.Scrolledtreeview.heading("#0", anchor="center")
        self.Scrolledtreeview.column("#0", width="0")
        self.Scrolledtreeview.column("#0", minwidth="0")
        self.Scrolledtreeview.column("#0", stretch="0")
        self.Scrolledtreeview.column("#0", anchor="center")

        # list population
        self.Scrolledtreeview.heading("Col0", text="Item Id")
        self.Scrolledtreeview.heading("Col0", anchor="center")
        self.Scrolledtreeview.column("Col0", width="5")
        self.Scrolledtreeview.column("Col0", anchor="center")

        self.Scrolledtreeview.heading("Col1", text="Item Name")
        self.Scrolledtreeview.heading("Col1", anchor="center")
        self.Scrolledtreeview.column("Col1", width="100")
        self.Scrolledtreeview.column("Col1", anchor="center")

        self.Scrolledtreeview.heading("Col2", text="Category")
        self.Scrolledtreeview.heading("Col2", anchor="center")
        self.Scrolledtreeview.column("Col2", width="80")
        self.Scrolledtreeview.column("Col2", anchor="center")

        self.Scrolledtreeview.heading("Col3", text="Item Description")
        self.Scrolledtreeview.heading("Col3", anchor="center")
        self.Scrolledtreeview.column("Col3", width="60")
        self.Scrolledtreeview.column("Col3", minwidth="50")
        self.Scrolledtreeview.column("Col3", anchor="center")
        item_desc = partial(self.showdesc)
        self.Scrolledtreeview.bind('<Double-Button-1>', item_desc)

        self.Scrolledtreeview.heading("Col4", text="Quantity")
        self.Scrolledtreeview.heading("Col4", anchor="center")
        self.Scrolledtreeview.column("Col4", width="20")
        self.Scrolledtreeview.column("Col4", anchor="center")

        self.Scrolledtreeview.heading("Col5", text="Owner")
        self.Scrolledtreeview.heading("Col5", anchor="center")
        self.Scrolledtreeview.column("Col5", width="50")
        self.Scrolledtreeview.column("Col5", anchor="center")

        self.Scrolledtreeview.heading("Col6", text="Status")
        self.Scrolledtreeview.heading("Col6", anchor="center")
        self.Scrolledtreeview.column("Col6", width="50")
        self.Scrolledtreeview.column("Col6", anchor="center")

        self.Scrolledtreeview.heading("Col7", text="Time left")
        self.Scrolledtreeview.heading("Col7", anchor="center")
        self.Scrolledtreeview.column("Col7", width="50")
        self.Scrolledtreeview.column("Col7", anchor="center")

        self.Scrolledtreeview.heading("Col8", text="Current Bid")
        self.Scrolledtreeview.heading("Col8", anchor="center")
        self.Scrolledtreeview.column("Col8", width="50")
        self.Scrolledtreeview.column("Col8", anchor="center")

        self.Scrolledtreeview.heading("Col9", text="Bidder Name")
        self.Scrolledtreeview.heading("Col9", anchor="center")
        self.Scrolledtreeview.column("Col9", width="50")
        self.Scrolledtreeview.column("Col9", anchor="center")

        all_rows = conn.execute("SELECT * from ITEMS")
        for row in all_rows:
            current_time = str(datetime.now().time())
            current_time = current_time.split('.')[0]
            FMT = '%H:%M:%S'
            time_left = datetime.strptime(row[7], FMT) - datetime.strptime(current_time, FMT)
            remaining_time = str(time_left)
            sold = 'sold'
            if time_left < timedelta(hours=0, minutes=0, seconds=0):
                conn.execute("UPDATE ITEMS SET status=? WHERE id = ?", (sold, row[0]))
                remaining_time = '0'
                conn.commit()
            self.Scrolledtreeview.insert('', 'end', values=(
                row[0], row[1], row[2], row[3], row[4], row[5], row[6], remaining_time, row[8], row[9]))

        self.add_new_button = tk.Button(top)
        self.add_new_button.place(relx=0.310, rely=0.838, height=38, width=126)
        self.add_new_button.configure(activebackground="#ececec")
        self.add_new_button.configure(activeforeground="#000000")
        self.add_new_button.configure(background="#382ff0")
        self.add_new_button.configure(disabledforeground="#a3a3a3")
        self.add_new_button.configure(font="-family {Segoe UI} -size 10")
        self.add_new_button.configure(foreground="#ffffff")
        self.add_new_button.configure(highlightbackground="#d9d9d9")
        self.add_new_button.configure(highlightcolor="#000000")
        self.add_new_button.configure(pady="0")
        self.add_new_button.configure(text='''Add New Item''')
        self.add_new_button.configure(command=self.addnewitem)

        self.refresh_button = tk.Button(top)
        self.refresh_button.place(relx=0.919, rely=0.838, height=38, width=66)
        self.refresh_button.configure(activebackground="#ececec")
        self.refresh_button.configure(activeforeground="#000000")
        self.refresh_button.configure(background="#382ff0")
        self.refresh_button.configure(disabledforeground="#a3a3a3")
        self.refresh_button.configure(font="-family {Segoe UI} -size 10")
        self.refresh_button.configure(foreground="#ffffff")
        self.refresh_button.configure(highlightbackground="#d9d9d9")
        self.refresh_button.configure(highlightcolor="#000000")
        self.refresh_button.configure(pady="0")
        self.refresh_button.configure(text='''Refresh''')
        self.refresh_button.configure(command=self.refresh)


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
