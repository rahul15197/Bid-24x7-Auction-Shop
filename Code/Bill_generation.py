#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Nov 30, 2019 10:35:19 PM IST  platform: Windows NT

import sys
import time
import sqlite3 as sq
from tkinter import RIGHT, X, HORIZONTAL, messagebox
from functools import partial
from datetime import timedelta
from datetime import datetime

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import Bill_generation_support
import time
from reportlab.lib.enums import TA_JUSTIFY
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = bill_generation_window(root)
    Bill_generation_support.init(root, top)
    root.mainloop()


w = None


def create_bill_generation_window(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = bill_generation_window(w)
    Bill_generation_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_bill_generation_window():
    global w
    w.destroy()
    w = None


class bill_generation_window:
    def showdesc(self, x1):
        curItem = self.bills_to_generate.focus()
        contents = (self.bills_to_generate.item(curItem))
        item_desc = contents['values'][2]
        messagebox.showinfo("Item Description", item_desc)

    def generatebill(self):
        curItem = self.bills_to_generate.focus()
        contents = (self.bills_to_generate.item(curItem))
        item_id = contents['values'][0]
        item_name = contents['values'][1]
        item_category = contents['values'][2]
        item_desc = contents['values'][3]
        item_quantity = contents['values'][4]
        item_owner = contents['values'][5]
        final_bid = contents['values'][6]
        final_bidder = contents['values'][7]

        doc = SimpleDocTemplate("form_letter.pdf", pagesize=letter,
                                rightMargin=72, leftMargin=72,
                                topMargin=72, bottomMargin=18)
        Story = []
        logo = "icon.png"

        current_datetime = time.ctime()

        im = Image(logo, 3 * inch, 2 * inch)
        Story.append(im)

        styles = getSampleStyleSheet()
        styles.add(ParagraphStyle(name='Justify', alignment=TA_JUSTIFY))
        ptext = '<font size=12>%s</font>' % current_datetime
        Story.append(Spacer(1, 48))
        Story.append(Paragraph(ptext, styles["Normal"]))
        Story.append(Spacer(1, 24))

        ptext = '<font size=12>Item id = %s</font>'% (item_id, )
        Story.append(Paragraph(ptext, styles["Justify"]))
        Story.append(Spacer(1, 12))

        ptext = '<font size=12>Item name = %s</font>' % (item_name,)
        Story.append(Paragraph(ptext, styles["Justify"]))
        Story.append(Spacer(1, 12))

        ptext = '<font size=12>Item category = %s</font>' % (item_category,)
        Story.append(Paragraph(ptext, styles["Justify"]))
        Story.append(Spacer(1, 12))

        ptext = '<font size=12>Item quantity = %s</font>' % (item_quantity,)
        Story.append(Paragraph(ptext, styles["Justify"]))
        Story.append(Spacer(1, 12))

        ptext = '<font size=12>Item description = %s</font>' % (item_desc,)
        Story.append(Paragraph(ptext, styles["Justify"]))
        Story.append(Spacer(1, 12))

        ptext = '<font size=12>Previous Owner = %s</font>' % (item_owner,)
        Story.append(Paragraph(ptext, styles["Justify"]))
        Story.append(Spacer(1, 12))

        ptext = '<font size=12>Final Bid Total = %s</font>' % (final_bid,)
        Story.append(Paragraph(ptext, styles["Justify"]))
        Story.append(Spacer(1, 12))

        ptext = '<font size=12>Bid Winner = %s</font>' % (final_bidder,)
        Story.append(Paragraph(ptext, styles["Justify"]))
        Story.append(Spacer(1, 24))

        ptext = '<font size=12>Thank you very much and we look forward to serving you.</font>'
        Story.append(Paragraph(ptext, styles["Justify"]))
        Story.append(Spacer(1, 48))
        ptext = '<font size=12>Sincerely,</font>'
        Story.append(Paragraph(ptext, styles["Normal"]))
        Story.append(Spacer(1, 12))
        ptext = '<font size=12>Bid 24x7</font>'
        Story.append(Paragraph(ptext, styles["Normal"]))
        Story.append(Spacer(1, 12))
        doc.build(Story)
        messagebox.showinfo("Message", "Bill Generated Successfully")

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1300x600+100+50")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("Bill Generation Window")
        top.configure(background="#d9d9d9")

        self.style.configure('Treeview', font="TkDefaultFont")
        self.bills_to_generate = ScrolledTreeView(top)
        self.bills_to_generate.place(relx=0.0, rely=0.156, relheight=0.838
                                     , relwidth=1.0)
        self.bills_to_generate.configure(columns=("Col0", "Col1", "Col2", "Col3", "Col4", "Col5", "Col6", "Col7"))

        # build_treeview_support starting.
        self.bills_to_generate.heading("#0", text="")
        self.bills_to_generate.heading("#0", anchor="center")
        self.bills_to_generate.column("#0", width="0")
        self.bills_to_generate.column("#0", minwidth="0")
        self.bills_to_generate.column("#0", stretch="0")
        self.bills_to_generate.column("#0", anchor="center")

        self.bills_to_generate.heading("Col0", text="Item Id")
        self.bills_to_generate.heading("Col0", anchor="center")
        self.bills_to_generate.column("Col0", width="20")
        self.bills_to_generate.column("Col0", anchor="center")

        self.bills_to_generate.heading("Col1", text="Item Name")
        self.bills_to_generate.heading("Col1", anchor="center")
        self.bills_to_generate.column("Col1", width="100")
        self.bills_to_generate.column("Col1", anchor="center")

        self.bills_to_generate.heading("Col2", text="Category")
        self.bills_to_generate.heading("Col2", anchor="center")
        self.bills_to_generate.column("Col2", width="80")
        self.bills_to_generate.column("Col2", anchor="center")

        self.bills_to_generate.heading("Col3", text="Item Description")
        self.bills_to_generate.heading("Col3", anchor="center")
        self.bills_to_generate.column("Col3", width="0")
        self.bills_to_generate.column("Col3", minwidth="100")
        self.bills_to_generate.column("Col3", anchor="center")
        item_desc = partial(self.showdesc)
        self.bills_to_generate.bind('<Double-Button-1>', item_desc)

        self.bills_to_generate.heading("Col4", text="Quantity")
        self.bills_to_generate.heading("Col4", anchor="center")
        self.bills_to_generate.column("Col4", width="50")
        self.bills_to_generate.column("Col4", anchor="center")

        self.bills_to_generate.heading("Col5", text="Owner")
        self.bills_to_generate.heading("Col5", anchor="center")
        self.bills_to_generate.column("Col5", width="50")
        self.bills_to_generate.column("Col5", anchor="center")

        self.bills_to_generate.heading("Col6", text="Final Bid")
        self.bills_to_generate.heading("Col6", anchor="center")
        self.bills_to_generate.column("Col6", width="50")
        self.bills_to_generate.column("Col6", anchor="center")

        self.bills_to_generate.heading("Col7", text="Bid Winner")
        self.bills_to_generate.heading("Col7", anchor="center")
        self.bills_to_generate.column("Col7", width="50")
        self.bills_to_generate.column("Col7", anchor="center")

        self.bill_generation_button = tk.Button(top)
        self.bill_generation_button.place(relx=0.833, rely=0.044, height=33
                                          , width=93)
        self.bill_generation_button.configure(activebackground="#ececec")
        self.bill_generation_button.configure(activeforeground="#000000")
        self.bill_generation_button.configure(background="#d9d9d9")
        self.bill_generation_button.configure(disabledforeground="#a3a3a3")
        self.bill_generation_button.configure(foreground="#000000")
        self.bill_generation_button.configure(highlightbackground="#d9d9d9")
        self.bill_generation_button.configure(highlightcolor="black")
        self.bill_generation_button.configure(pady="0")
        self.bill_generation_button.configure(text='''Generate Bill''')
        self.bill_generation_button.configure(command=self.generatebill)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.0, rely=0.044, height=26, width=171)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Bill Generation Privileges''')

        conn = sq.connect('accounts.db')
        all_rows = conn.execute("SELECT * from ITEMS where status =='sold'")
        for row in all_rows:
            self.bills_to_generate.insert('', 'end', values=(
                row[0], row[1], row[2], row[3], row[4], row[5], row[8], row[9]))
    # def bill_generation_activity(self):


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
