#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Nov 22, 2019 10:45:31 PM IST  platform: Windows NT

import sqlite3 as sq
import sys
from functools import partial
from time import time
from tkinter import messagebox

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import add_new_item_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    add_new_item_support.set_Tk_var()
    top = newitem_window(root)
    add_new_item_support.init(root, top)
    root.mainloop()


w = None


def create_newitem_window(root, *args, **kwargs):
    """Starting point when module is imported by another program."""
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    add_new_item_support.set_Tk_var()
    top = newitem_window(w)
    add_new_item_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_newitem_window():
    global w
    w.destroy()
    w = None


class newitem_window:
    selected_category = ''

    def addnew(self, name, desc, price, quantity, duration):
        conn = sq.connect('accounts.db')
        item_name = str(name.get())
        item_category = self.selected_category
        item_desc = str(desc.get())
        owner = str(conn.execute("SELECT name FROM CURRENT_USER").fetchone()[0])
        status = 'available'
        item_price = str(price.get())
        bidder = owner
        quantity = str(quantity.get())
        duration = str(duration.get())
        conn = sq.connect('accounts.db')
        if item_name != "" and item_desc != "" and item_price != "" and quantity != "" and duration != "":
            if not item_price.isdigit() or not quantity.isdigit():
                messagebox.showerror("Message", "Price and quantity can only be a number")
            else:
                conn.execute("INSERT INTO ITEMS (name,category,desc,quantity,owner,status,duration,current_bid,current_bidder) \
                                                                              VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                             (item_name, item_category, item_desc, quantity, owner, status, duration, item_price,
                              bidder))
                conn.commit()
                messagebox.showinfo("Message", "Item Successfully added")
        else:
            messagebox.showerror("Message", "All entries are mandatory")

    def category_change(self, event):
        self.selected_category = self.combobox_entry.get()

    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font10 = "-family {Segoe UI} -size 12 -weight normal -slant " \
                 "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 20 -weight normal -slant " \
                "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("612x658+450+50")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("Add New Item")
        top.configure(background="#400080")

        name = tk.StringVar()
        desc = tk.StringVar()
        current_bid = tk.IntVar()
        duration = tk.StringVar()
        quantity = tk.IntVar()

        self.details_text = tk.Label(top)
        self.details_text.place(relx=0.147, rely=0.061, height=76, width=431)
        self.details_text.configure(background="#400080")
        self.details_text.configure(disabledforeground="#a3a3a3")
        self.details_text.configure(font=font9)
        self.details_text.configure(foreground="#ffffff")
        self.details_text.configure(text='''Please add new Item details''')

        self.name_label = tk.Label(top)
        self.name_label.place(relx=0.212, rely=0.304, height=34, width=102)
        self.name_label.configure(background="#400080")
        self.name_label.configure(disabledforeground="#a3a3a3")
        self.name_label.configure(font=font10)
        self.name_label.configure(foreground="#ffffff")
        self.name_label.configure(text='''Item Name''')

        self.category_label = tk.Label(top)
        self.category_label.place(relx=0.212, rely=0.395, height=34, width=102)
        self.category_label.configure(activebackground="#f9f9f9")
        self.category_label.configure(activeforeground="black")
        self.category_label.configure(background="#400080")
        self.category_label.configure(disabledforeground="#a3a3a3")
        self.category_label.configure(font="-family {Segoe UI} -size 12")
        self.category_label.configure(foreground="#ffffff")
        self.category_label.configure(highlightbackground="#d9d9d9")
        self.category_label.configure(highlightcolor="black")
        self.category_label.configure(text='''Category''')

        self.desc_label = tk.Label(top)
        self.desc_label.place(relx=0.212, rely=0.486, height=34, width=102)
        self.desc_label.configure(activebackground="#f9f9f9")
        self.desc_label.configure(activeforeground="black")
        self.desc_label.configure(background="#400080")
        self.desc_label.configure(disabledforeground="#a3a3a3")
        self.desc_label.configure(font="-family {Segoe UI} -size 12")
        self.desc_label.configure(foreground="#ffffff")
        self.desc_label.configure(highlightbackground="#d9d9d9")
        self.desc_label.configure(highlightcolor="black")
        self.desc_label.configure(text='''Description''')

        self.initialbid_label = tk.Label(top)
        self.initialbid_label.place(relx=0.212, rely=0.578, height=34, width=102)

        self.initialbid_label.configure(activebackground="#f9f9f9")
        self.initialbid_label.configure(activeforeground="black")
        self.initialbid_label.configure(background="#400080")
        self.initialbid_label.configure(disabledforeground="#a3a3a3")
        self.initialbid_label.configure(font="-family {Segoe UI} -size 12")
        self.initialbid_label.configure(foreground="#ffffff")
        self.initialbid_label.configure(highlightbackground="#d9d9d9")
        self.initialbid_label.configure(highlightcolor="black")
        self.initialbid_label.configure(text='''Initial Bid''')

        self.item_name_entry = tk.Entry(top)
        self.item_name_entry.place(relx=0.49, rely=0.319, height=24
                                   , relwidth=0.333)
        self.item_name_entry.configure(background="white")
        self.item_name_entry.configure(textvariable=name)
        self.item_name_entry.configure(disabledforeground="#a3a3a3")
        self.item_name_entry.configure(font="TkFixedFont")
        self.item_name_entry.configure(foreground="#000000")
        self.item_name_entry.configure(insertbackground="black")

        self.desc_entry = tk.Entry(top)
        self.desc_entry.place(relx=0.49, rely=0.502, height=24, relwidth=0.333)
        self.desc_entry.configure(background="white")
        self.desc_entry.configure(textvariable=desc)
        self.desc_entry.configure(disabledforeground="#a3a3a3")
        self.desc_entry.configure(font="TkFixedFont")
        self.desc_entry.configure(foreground="#000000")
        self.desc_entry.configure(highlightbackground="#d9d9d9")
        self.desc_entry.configure(highlightcolor="black")
        self.desc_entry.configure(insertbackground="black")
        self.desc_entry.configure(selectbackground="#c4c4c4")
        self.desc_entry.configure(selectforeground="black")

        self.bid_entry = tk.Entry(top)
        self.bid_entry.place(relx=0.49, rely=0.593, height=24, relwidth=0.333)
        self.bid_entry.configure(background="white")
        self.bid_entry.configure(textvariable=current_bid)
        self.bid_entry.configure(disabledforeground="#a3a3a3")
        self.bid_entry.configure(font="TkFixedFont")
        self.bid_entry.configure(foreground="#000000")
        self.bid_entry.configure(highlightbackground="#d9d9d9")
        self.bid_entry.configure(highlightcolor="black")
        self.bid_entry.configure(insertbackground="black")
        self.bid_entry.configure(selectbackground="#c4c4c4")
        self.bid_entry.configure(selectforeground="black")

        conn = sq.connect('accounts.db')
        category_list = []
        categories = conn.execute("SELECT * FROM CATEGORIES").fetchall()
        for category in categories:
            category_list.append(category[0])
        self.combobox_entry = ttk.Combobox(top)
        self.combobox_entry.place(relx=0.49, rely=0.41, relheight=0.04
                                  , relwidth=0.338)
        self.combobox_entry.configure(textvariable=add_new_item_support.combobox, state="readonly")
        self.combobox_entry.configure(takefocus="")
        self.combobox_entry.configure(values=category_list)
        self.combobox_entry.current(0)
        self.selected_category = self.combobox_entry.get()
        self.combobox_entry.bind("<<ComboboxSelected>>", self.category_change)

        self.item_quantity = tk.Entry(top)
        self.item_quantity.place(relx=0.49, rely=0.684, height=24
                                 , relwidth=0.333)
        self.item_quantity.configure(background="white")
        self.item_quantity.configure(disabledforeground="#a3a3a3")
        self.item_quantity.configure(font="TkFixedFont")
        self.item_quantity.configure(foreground="#000000")
        self.item_quantity.configure(highlightbackground="#d9d9d9")
        self.item_quantity.configure(highlightcolor="black")
        self.item_quantity.configure(insertbackground="black")
        self.item_quantity.configure(selectbackground="#c4c4c4")
        self.item_quantity.configure(selectforeground="black")
        self.item_quantity.configure(textvariable=quantity)

        self.item_duration = tk.Entry(top)
        self.item_duration.place(relx=0.49, rely=0.76, height=24, relwidth=0.333)

        self.item_duration.configure(background="white")
        self.item_duration.configure(disabledforeground="#a3a3a3")
        self.item_duration.configure(font="TkFixedFont")
        self.item_duration.configure(foreground="#000000")
        self.item_duration.configure(highlightbackground="#d9d9d9")
        self.item_duration.configure(highlightcolor="black")
        self.item_duration.configure(insertbackground="black")
        self.item_duration.configure(selectbackground="#c4c4c4")
        self.item_duration.configure(selectforeground="black")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.item_duration, tooltip_font, '''Enter in (hh:mm:ss)''', delay=0.5)
        self.item_duration.configure(textvariable=duration)

        self.initialbid_label_3 = tk.Label(top)
        self.initialbid_label_3.place(relx=0.212, rely=0.669, height=34
                                      , width=102)
        self.initialbid_label_3.configure(activebackground="#f9f9f9")
        self.initialbid_label_3.configure(activeforeground="black")
        self.initialbid_label_3.configure(background="#400080")
        self.initialbid_label_3.configure(disabledforeground="#a3a3a3")
        self.initialbid_label_3.configure(font="-family {Segoe UI} -size 12")
        self.initialbid_label_3.configure(foreground="#ffffff")
        self.initialbid_label_3.configure(highlightbackground="#d9d9d9")
        self.initialbid_label_3.configure(highlightcolor="black")
        self.initialbid_label_3.configure(text='''Quantity''')

        self.initialbid_label_4 = tk.Label(top)
        self.initialbid_label_4.place(relx=0.212, rely=0.745, height=34
                                      , width=102)
        self.initialbid_label_4.configure(activebackground="#f9f9f9")
        self.initialbid_label_4.configure(activeforeground="black")
        self.initialbid_label_4.configure(background="#400080")
        self.initialbid_label_4.configure(disabledforeground="#a3a3a3")
        self.initialbid_label_4.configure(font="-family {Segoe UI} -size 12")
        self.initialbid_label_4.configure(foreground="#ffffff")
        self.initialbid_label_4.configure(highlightbackground="#d9d9d9")
        self.initialbid_label_4.configure(highlightcolor="black")
        self.initialbid_label_4.configure(text='''Bid end time''')

        self.add_button = tk.Button(top)
        self.add_button.place(relx=0.425, rely=0.836, height=47, width=98)
        self.add_button.configure(activebackground="#ececec")
        self.add_button.configure(activeforeground="#340068")
        self.add_button.configure(background="#25004a")
        self.add_button.configure(disabledforeground="#a3a3a3")
        self.add_button.configure(font=font10)
        self.add_button.configure(foreground="#ffffff")
        self.add_button.configure(highlightbackground="#d9d9d9")
        self.add_button.configure(highlightcolor="black")
        self.add_button.configure(pady="0")
        self.add_button.configure(text='''Add Item''')
        addnewitem = partial(self.addnew, self.item_name_entry, self.desc_entry, self.bid_entry, self.item_quantity,
                             self.item_duration)
        self.add_button.configure(command=addnewitem)


class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """

    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                   font=tooltip_font,
                   aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()


# ===========================================================
#                   End of Class ToolTip
# ===========================================================


if __name__ == '__main__':
    vp_start_gui()
